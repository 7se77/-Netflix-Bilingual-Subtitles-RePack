! function(e) {
    var o = {};

    function n(a) {
        if (o[a]) return o[a].exports;
        var t = o[a] = {
            i: a,
            l: !1,
            exports: {}
        };
        return e[a].call(t.exports, t, t.exports, n), t.l = !0, t.exports
    }
    n.m = e, n.c = o, n.d = function(e, o, a) {
        n.o(e, o) || Object.defineProperty(e, o, {
            enumerable: !0,
            get: a
        })
    }, n.r = function(e) {
        "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
            value: "Module"
        }), Object.defineProperty(e, "__esModule", {
            value: !0
        })
    }, n.t = function(e, o) {
        if (1 & o && (e = n(e)), 8 & o) return e;
        if (4 & o && "object" == typeof e && e && e.__esModule) return e;
        var a = Object.create(null);
        if (n.r(a), Object.defineProperty(a, "default", {
                enumerable: !0,
                value: e
            }), 2 & o && "string" != typeof e)
            for (var t in e) n.d(a, t, function(o) {
                return e[o]
            }.bind(null, t));
        return a
    }, n.n = function(e) {
        var o = e && e.__esModule ? function() {
            return e.default
        } : function() {
            return e
        };
        return n.d(o, "a", o), o
    }, n.o = function(e, o) {
        return Object.prototype.hasOwnProperty.call(e, o)
    }, n.p = "", n(n.s = 18)
}({
    18: function(e, o) {
        chrome.runtime.onInstalled.addListener(async () => {
            let e, o;
            console.log("- 安裝或更新插件 / 更新瀏覽器");
            let n = "";
            const a = chrome.i18n.getUILanguage();
            "zh-TW" === a && (n = "zh-Hant"), "zh-CN" === a && (n = "zh-Hans");
            try {
                const n = await browser.storage.sync.get(["enable", "version"]);
                e = n.enable, o = n.version
            } catch (n) {
                const a = await chrome.storage.sync.get(["enable", "version"]);
                e = a.enable, o = a.version
            }
            void 0 === e && (console.log("- 初始化插件參數"), chrome.storage.sync.set({
                enable: !0,
                subY: .7,
                mainFamily: "Netflix Sans,Helvetica Neue,Segoe UI,Roboto,Ubuntu,sans-serif",
                mainGoogleFamilies: "",
                mainGoogleCssProperties: "",
                mainSize: 1,
                mainWeight: 500,
                mainColor: "#FFFFFF",
                mainBackgroundColor: "#000000",
                mainBackgroundColorOpacity: .5,
                secondFamily: "Netflix Sans,Helvetica Neue,Segoe UI,Roboto,Ubuntu,sans-serif",
                secondGoogleFamilies: "",
                secondGoogleCssProperties: "",
                secondSize: 1,
                secondWeight: 500,
                secondColor: "#FFFFFF",
                secondBackgroundColor: "#000000",
                secondBackgroundColorOpacity: .5,
                space: .005,
                imageBasedSubs: !1,
                learning: !1,
                youtube: !1,
                autoPlayNextSub: !0,
                skipPatternWhoSpeak: !0,
                playTypingSound: !0,
                secondsToDelay: .5,
                ignoreCase: !0,
                selectable: !1,
                mainLanguages: [],
                secondLanguages: [],
                enableShortcuts: !0,
                levelOneWords: !1,
                levelTwoWords: !1,
                levelThreeWords: !1,
                levelFourWords: !1,
                copyPreviousSubShortcut: !1,
                playbackSpeedShortcut: !1,
                japaneseEnable: !0,
                japaneseConvertTo: "hiragana",
                japaneseMode: "furigana",
                japaneseRomaji: "nippon",
                translationEnable: !1,
                translationLanguage: n,
                translationEngine: "google",
                showAllLangSelections: !1,
                useBackupTranslationService: !1,
                enableAiTranslation: !1,
                selectedTranslationLanguages: ["en", "ja", "ko", "zh-CN", "zh-TW", "zh-Hans", "zh-Hant", "EN-US", "EN-GB", "ZH", "ZH-TW", "JA", "KO"],
                enableTextSegmentation: !0,
                defaultPromptId: "2",
                accessibilityRate: 2,
                accessibilityVolume: .7,
                accessibilityVoice: ""
            })), "9.4" !== o && (console.log("- 更新插件參數"), chrome.storage.sync.set({
                version: "9.4",
                accessibilityRate: 2,
                accessibilityVolume: .7,
                accessibilityVoice: ""
            }))
        }), chrome.runtime.onMessage.addListener((e, o, n) => {
            if (o.tab && e.browser) {
                console.log(`- 接收到來自 ${o.tab.title} 的訊息`);
                const {
                    browser: a
                } = e, t = o.tab.id, r = function(e) {
                    return e.isFirefox || e.isOpera ? chrome.browserAction : chrome.action
                }(a);
                r.setIcon({
                    path: {
                        16: "image/logo/16x16.png",
                        24: "image/logo/24x24.png",
                        32: "image/logo/32x32.png",
                        48: "image/logo/48x48.png",
                        64: "image/logo/64x64.png",
                        128: "image/logo/128x128.png",
                        256: "image/logo/256x256.png",
                        512: "image/logo/512x512.png"
                    },
                    tabId: t
                }), chrome.storage.sync.get(["enable"], ({
                    enable: e
                }) => {
                    !0 === e && r.setBadgeText({
                        text: "on",
                        tabId: t
                    }), !1 === e && r.setBadgeText({
                        ///////////////////////
                        //text: "off",
                        ///////////////////////
                        text: "on",
                        tabId: t
                    })
                }), n({
                    response: "- 接收到來自 background 的訊息，更新圖示和文字"
                })
            }
        })
    }
});